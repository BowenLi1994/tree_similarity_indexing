      if(*string_begin=='<'){
      string_begin++;
      std::string tree_size;
      while(*string_begin!='>'){
        tree_size+=*string_begin;
        string_begin++;
      }

      set.first=std::stoi(tree_size);
      }

      while (string_begin!=string_end){
        if(*string_begin=='['){

          string_begin++;
          std::string s[3];
          int counter=0;
          label_feature_set_converter::LabelSetElement element;

          while(*string_begin!=']'){

            if(*string_begin=='{'){
              string_begin++;
              std::vector<std::string> node_mapping={""};
              while(*string_begin!='}'){
                std::unordered_map<std::string,int> histograms[4];
                int histogram_counter=0;
                //std::cout<<*string_begin;
                if(*string_begin=='<'){
                  string_begin++;
                  while(*string_begin!='>'){
                    if(*string_begin=='('){
                      string_begin++;
                      std::string kv[2];
                      int kv_counter=0;
                      while(*string_begin!=')'){

                        if(*string_begin==',')
                          kv_counter++;
                        else
                          kv[kv_counter]+=*string_begin;

                        string_begin++;
                      }
                      //std::cout<<"key: "<<kv[0]<<" value: "<<kv[1]<<std::endl;
                      histograms[histogram_counter].emplace(kv[0],std::stoi(kv[1]));
                    }
                    string_begin++;
                  }
                  histogram_counter++;
                  
                  

                }

                else{
                if(*string_begin==',')
                  node_mapping.push_back("");
                else
                  node_mapping.back().push_back(*string_begin);
                }

                  label_feature_set_converter::StructuralVector sv;
                  sv.postorder_id=std::stoi(node_mapping[0]);
                  sv.number_nodes_ancestor=std::stoi(node_mapping[1]);
                  sv.number_nodes_descendant=std::stoi(node_mapping[2]);
                  sv.number_nodes_left=std::stoi(node_mapping[3]);
                  sv.number_nodes_right=std::stoi(node_mapping[4]);

                  sv.label_histogram[0]=histograms[0];
                  sv.label_histogram[1]=histograms[1];
                  sv.label_histogram[2]=histograms[2];
                  sv.label_histogram[3]=histograms[3];

                  element.struct_vect.push_back(sv);

                string_begin++;
              }

              

 

            }
            else{
              if(*string_begin==',')
                counter++;
              else
                s[counter]+=*string_begin;
            }



            string_begin++;
          }
          element.id=std::stoi(s[0]);
          element.weight=std::stoi(s[1]);
          element.weight_so_far=std::stoi(s[2]);
          set.second.push_back(element);
        }
        string_begin++;
      }